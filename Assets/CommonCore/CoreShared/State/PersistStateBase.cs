using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Newtonsoft.Json;
using System;

namespace CommonCore.State
{
    //DO NOT EDIT THIS FILE

    /// <summary>
    /// Represents state information to be retained across game sessions
    /// </summary>
    /// <remarks>
    /// Note that persist state is explicitly loaded and saved by state module.
    /// </remarks>
    public sealed partial class PersistState
    {

        private static readonly string Path = CoreParams.PersistentDataPath + "/persist.json";

        public static PersistState Instance { get; private set; }

        /// <summary>
        /// Loads persistent state from the default file
        /// </summary>
        public static void Load()
        {
            Instance = CoreUtils.LoadExternalJson<PersistState>(Path);
            if (Instance == null)
            {
                Instance = new PersistState();
            }
            else
            {
                Instance.IsFirstRun = false;                
            }

            MigrateLastMigratedVersion(Instance);
        }

        /// <summary>
        /// Saves persistent state to the default file
        /// </summary>
        public static void Save()
        {
            Instance.CurrentVersion = CoreParams.GetCurrentVersion();
            CoreUtils.SaveExternalJson(Path, Instance);
        }

        /// <summary>
        /// Purges the current persistent state and commits this to the default file
        /// </summary>
        public static void Reset()
        {
            Instance = new PersistState();
            Save();
        }

        //our first "migration": sets LastMigratedVersion if not already set
        private static void MigrateLastMigratedVersion(PersistState ps)
        {
            if (ps.LastMigratedVersion == null)
            {
                ps.LastMigratedVersion = CoreParams.GetCurrentVersion();
                Debug.Log($"[PersistState] Migrated to {ps.LastMigratedVersion} ({nameof(MigrateLastMigratedVersion)})");
            }
        }

        //versioning metadata

        /// <summary>
        /// Version information of the initial state or last migration
        /// </summary>
        [JsonProperty]
        public VersionInfo LastMigratedVersion { get; private set; }

        /// <summary>
        /// Version information of the current state
        /// </summary>
        [JsonProperty]
        public VersionInfo CurrentVersion { get; private set; } = CoreParams.GetCurrentVersion();

        //actual instance data (shared across game types)

        /// <summary>
        /// Key/Value store for arbitrary persistent data
        /// </summary>
        [JsonProperty]
        public Dictionary<string, System.Object> ExtraStore { get; private set; } = new Dictionary<string, object>();

        /// <summary>
        /// If this is the first time the game has been run
        /// </summary>
        [JsonIgnore]
        public bool IsFirstRun { get; set; } = true;

        /// <summary>
        /// Campaign Identifier of the last played game
        /// </summary>
        public string LastCampaignIdentifier { get; set; } = null;

        /// <summary>
        /// Last time this application was started up
        /// </summary>
        public DateTime? LastStartupTime { get; set; } = null;

        /// <summary>
        /// Last time this application was exited
        /// </summary>
        public DateTime? LastExitTime { get; set; } = null;

        /// <summary>
        /// Last path this application was started from
        /// </summary>
        public string LastApplicationPath { get; set; } = null;
    }
}