using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Newtonsoft.Json;
using System;
using CommonCore.Migrations;
using Newtonsoft.Json.Linq;
using System.IO;

namespace CommonCore.State
{
    //DO NOT EDIT THIS FILE

    /// <summary>
    /// Represents state information to be retained across game sessions
    /// </summary>
    /// <remarks>
    /// Note that persist state is explicitly loaded and saved by state module.
    /// </remarks>
    public sealed partial class PersistState : IMigratable
    {

        private static readonly string Path = CoreParams.PersistentDataPath + "/persist.json";

        public static PersistState Instance { get; private set; }

        /// <summary>
        /// Loads persistent state from the default file
        /// </summary>
        public static void Load()
        {
            if (File.Exists(Path))
            {
                //handle migrations
                var raw = CoreUtils.ReadExternalJson(Path) as JObject;
                var nRaw = MigrationsManager.Instance.MigrateToLatest<PersistState>(raw, true, out bool didMigrate);
                if (didMigrate)
                {
                    Debug.Log("[PersistState] Persist state was migrated successfully");
                    if (CoreParams.UseMigrationBackups || CoreParams.IsDebug)
                    {
                        Directory.CreateDirectory(System.IO.Path.Combine(CoreParams.PersistentDataPath, "migrationbackups"));
                        File.Copy(Path, System.IO.Path.Combine(CoreParams.PersistentDataPath, "migrationbackups", $"persist.migrated.{DateTime.Now.ToString("yyyy-MM-dd_HHmmss")}.json"), true);
                    }
                    CoreUtils.WriteExternalJson(Path, raw);
                }
                Instance = CoreUtils.InterpretJson<PersistState>(nRaw ?? raw);
            }

            if (Instance == null)
            {
                Instance = new PersistState();
            }
            else
            {
                Instance.IsFirstRun = false;                
            }
        }

        /// <summary>
        /// Saves persistent state to the default file
        /// </summary>
        public static void Save()
        {
            Instance.CurrentVersion = CoreParams.GetCurrentVersion();
            CoreUtils.SaveExternalJson(Path, Instance);
        }

        /// <summary>
        /// Purges the current persistent state and commits this to the default file
        /// </summary>
        public static void Reset()
        {
            Instance = new PersistState();
            Save();
        }

        //versioning metadata

        /// <summary>
        /// Version information of the initial state or last migration
        /// </summary>
        [JsonProperty]
        public VersionInfo LastMigratedVersion { get; private set; } = CoreParams.GetCurrentVersion();

        /// <summary>
        /// Version information of the current state
        /// </summary>
        [JsonProperty]
        public VersionInfo CurrentVersion { get; private set; } = CoreParams.GetCurrentVersion();

        Version IMigratable.LastMigratedVersion => LastMigratedVersion.GameVersion;

        //actual instance data (shared across game types)

        /// <summary>
        /// Key/Value store for arbitrary persistent data
        /// </summary>
        [JsonProperty]
        public Dictionary<string, System.Object> ExtraStore { get; private set; } = new Dictionary<string, object>();

        /// <summary>
        /// If this is the first time the game has been run
        /// </summary>
        [JsonIgnore]
        public bool IsFirstRun { get; set; } = true;

        /// <summary>
        /// Campaign Identifier of the last played game
        /// </summary>
        public string LastCampaignIdentifier { get; set; } = null;

        /// <summary>
        /// Last time this application was started up
        /// </summary>
        public DateTime? LastStartupTime { get; set; } = null;

        /// <summary>
        /// Last time this application was exited
        /// </summary>
        public DateTime? LastExitTime { get; set; } = null;

        /// <summary>
        /// Last path this application was started from
        /// </summary>
        public string LastApplicationPath { get; set; } = null;
        
    }
}